/*
* Copyright (C) 2019, Alashov Berkeli
* All rights reserved.
*/

import tm.alashow.buildSrc.App
import tm.alashow.buildSrc.Deps

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
	runOnEachPackage = false // run on ci only
}

apply plugin: 'com.github.triplet.play'
play {
	defaultToAppBundles = true
	track = prop('PUBLISH_TRACK', 'alpha')
	serviceAccountCredentials = rootProject.file('signing/play-account.json')
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
	compileSdkVersion App.targetSdkVersion

	defaultConfig {
		applicationId App.id
		targetSdkVersion App.targetSdkVersion
		minSdkVersion App.minSdkVersion
		versionCode App.versionCode
		versionName "${App.versionName}-${gitSha}"

		multiDexEnabled true
		vectorDrawables.useSupportLibrary = true
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'

		main.res.srcDirs += 'src/main/res-drawable'
	}

	compileOptions {
		sourceCompatibility 1.8
		targetCompatibility 1.8
	}

	lintOptions {
		abortOnError false
	}

	buildFeatures {
		compose = true
	}

	composeOptions {
		kotlinCompilerExtensionVersion Deps.Android.Compose.version
		kotlinCompilerVersion Deps.Kotlin.version
	}

	androidExtensions {
		experimental = true
	}

	signingConfigs {
		debug {
			storeFile rootProject.file('signing/alashov-debug.jks')
			storePassword 'alashov'
			keyPassword 'alashov'
			keyAlias 'alashov'
		}

		release {
			storeFile rootProject.file('signing/alashov-release.jks')
			storePassword prop('ALASHOV_RELEASE_KEYSTORE_PWD', '')
			keyPassword prop('ALASHOV_RELEASE_KEY_PWD', '')
			keyAlias 'alashov'
		}
	}

	buildTypes {
		debug {
			signingConfig signingConfigs.debug
			versionNameSuffix '-DEBUG'
			applicationIdSuffix '.debug'

			multiDexKeepProguard file('multidex-config.pro')
		}

		release {
			signingConfig signingConfigs.release
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

			multiDexKeepProguard file('multidex-config.pro')
		}
	}

	// app bundling configuration
	bundle {
		language {
			enableSplit = false // don't split language resources, as the app supports locale changing
		}
	}
	kotlinOptions {
		jvmTarget = '1.8'
		useIR = true
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {

	// utils
	implementation Deps.Utils.proguardSnippets

	kapt Deps.Android.Lifecycle.compiler

	// dagger-2
	implementation Deps.Dagger.hilt
	kapt Deps.Dagger.compiler
	kapt Deps.Dagger.hiltCompiler

	// leak canary
	debugImplementation Deps.LeakCanary.leakCanary
	debugImplementation Deps.LeakCanary.supportFragment
	releaseImplementation Deps.LeakCanary.noop

	// android
	implementation Deps.Android.multiDex

	implementation project(':common-ui-compose')
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'