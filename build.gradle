/*
 * Copyright (C) 2021, Alashov Berkeli
 * All rights reserved.
 */


import tm.alashow.buildSrc.Deps

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
    }

    dependencies {
        classpath Deps.Android.gradle
        classpath Deps.Kotlin.gradle
        classpath Deps.Kotlin.serialization
        classpath Deps.Dagger.hiltGradle
        classpath Deps.Gradle.googleServices
        classpath Deps.Gradle.dexCount
        classpath Deps.Gradle.playPublisher
        classpath Deps.Firebase.crashlyticsGradle
        classpath Deps.Android.navigationSafeArgs
    }
}

plugins {
    id "com.diffplug.spotless" version "5.14.0"
    id "com.github.ben-manes.versions" version "0.39.0"
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        jcenter()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"

            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"
        }
    }
}

subprojects {
    apply plugin: 'kotlinx-serialization'

    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            licenseHeaderFile project.rootProject.file('spotless/copyright.kt')
            target "**/*.kt"
            ktlint("0.41.0").userData(['android': 'true', 'max_line_length': '200', 'disabled_rules': 'no-wildcard-imports'])
        }
        format 'misc', {
            target '**/*.gradle', '**/*.md', '**/.gitignore'
            trimTrailingWhitespace()
            indentWithTabs()
        }
    }
}

Object prop(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]
    def envValue = System.getenv(propertyName)
    return propertyValue != null ? propertyValue : (envValue != null ? envValue : defaultValue)
}